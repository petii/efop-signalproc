#version 450
#extension GL_ARB_separate_shader_objects : enable

#define M_PI 3.14159265358979323846

//#define BUFFER_SIZE 1024
#define WORKGROUP_SIZE 1

// layout (constant_id = 20) const int WORKGROUP_SIZE = 128;
layout (constant_id = 21) const int BUFFER_SIZE = 512;
#define RESULT_SIZE (BUFFER_SIZE/2)
//layout (constant_id = 22) const int WORKGROUP_SIZE = 2;

// layout (local_size_x_id = 20,local_size_y=1,local_size_z=1) in;
layout (local_size_x = WORKGROUP_SIZE,local_size_y=1,local_size_z=1) in;

layout (std430,binding = 0) buffer AudioData{
    float value[BUFFER_SIZE];
} audio;

struct Complex {
    float real;
    float imag;
};

layout(std430, binding = 1) buffer buf {
    // Complex result[BUFFER_SIZE];
    float result[BUFFER_SIZE / 2];
};

void main() {
    for (int passes = 0 ; 
        passes <= BUFFER_SIZE/2/gl_NumWorkGroups.x ; 
        ++passes){
        uint index = gl_GlobalInvocationID.x + passes * gl_NumWorkGroups.x;
        if (index >= 20) { 
        float real = 0.0;
        float im = 0.0;
        //float p = 2 * M_PI * index / BUFFER_SIZE;
        
        for (int i = 0; i<BUFFER_SIZE; ++i) {
            float p = 2 * M_PI * index * i / BUFFER_SIZE;
            // Hann function
            float hann = sin(M_PI * (i+index) / (BUFFER_SIZE-1));
            float hannedAudio = hann*hann * audio.value[i];
            //real
            real += hannedAudio * cos(p);
            //imaginary
            im += hannedAudio * -sin(p);
            //real
            //real += audio.value[i] * cos(p);
            //imaginary
            //im += audio.value[i] * -sin(p);
        }
        result[index] =  sqrt(real*real + im*im) /2;
        //result[index] = sqrt(real*real + im*im) / (BUFFER_SIZE / 16);
        result[index] /= ( BUFFER_SIZE / index );
        }
        else {
            //result[index] = 0.0;
        }
        //result[index] = gl_NumWorkGroups.x;
        //result[index] = gl_GlobalInvocationID.x;

        //result[index] = sqrt(real*real + im*im) / (BUFFER_SIZE/4);
    }
    //result[gl_GlobalInvocationID.x] = audio.value[gl_GlobalInvocationID.x];
    // result[2*gl_GlobalInvocationID.x] = real;
    // result[2*gl_GlobalInvocationID.x+1] = im;
}
